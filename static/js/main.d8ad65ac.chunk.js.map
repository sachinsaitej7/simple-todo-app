{"version":3,"sources":["constants.tsx","types/Task.ts","components/Motions.tsx","components/CategoryFilter.tsx","store.ts","components/InputTask.tsx","components/TaskEditModal.tsx","components/Task.tsx","components/FilterBar.tsx","components/TaskList.tsx","assets/logo.png","components/ColorModeSwitcher.tsx","components/TopBar.tsx","components/Wrapper.tsx","components/Stats.tsx","theme.tsx","App.tsx","index.tsx"],"names":["VIEWPORT_WIDTH","TASKS_STORAGE_KEY","CATEGORY_ICON_MAP","personal","work","shopping","others","CATEGORY_COLOR_MAP","Task","constructor","name","category","isCompleted","id","createdAt","dueDate","this","uuid_v4","Date","now","MotionBox","motion","Box","MotionFlex","Flex","Stat","CategoryFilter","props","value","onChange","_jsx","Select","variant","maxW","e","target","children","map","useStore","create","set","tasks","undoStack","redoStack","filterValues","sortBy","setTasks","addTask","task","state","newTasks","push","removeTask","filter","updateTask","t","clearTasks","undo","lastTasks","pop","redo","setFilterValues","InputTask","setName","useState","setCategory","whileHover","scale","onSubmit","preventDefault","autoComplete","FormControl","my","_jsxs","style","gap","Input","mr","placeholder","IconButton","icon","AddIcon","size","type","TaskEditModal","_ref","onClose","currentTask","find","setTask","key","timestamp","getTime","checked","toISOString","split","join","Modal","isOpen","window","innerWidth","ModalOverlay","ModalContent","ModalHeader","ModalBody","FormLabel","htmlFor","isRequired","flexDirection","justifyContent","mb","Switch","isChecked","ModalFooter","Button","colorScheme","onClick","onSave","UNSELECTED_OPACITY","initialFieldAnimate","opacity","transition","duration","deleteFieldAnimate","ease","completedProps","textDecoration","TaskCard","editing","setEditing","fieldAnimate","setFieldAnimate","animate","onHoverStart","onHoverEnd","alignItems","borderRadius","boxShadow","p","w","initial","bg","Text","fontSize","width","pr","fontWeight","wordBreak","TimeIcon","toLocaleDateString","CheckIcon","EditIcon","DeleteIcon","setTimeout","SORT_BY_MAP","FilterBar","console","log","includes","c","activeFilterState","FaUndo","length","FaRedo","Menu","closeOnSelect","placement","MenuButton","as","px","py","FaFilter","MenuList","minWidth","MenuOptionGroup","title","sort","MenuItemOption","MenuDivider","toLocaleLowerCase","concat","TaskList","filteredTasks","a","b","localeCompare","Divider","overflowY","h","pb","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","color","marginLeft","TopBar","HStack","Grid","templateRows","templateColumns","m","GridItem","Image","src","LogoImg","alt","boxSize","Heading","cursor","justifySelf","rightIcon","ChevronDownIcon","SettingsIcon","minW","MenuItem","Wrapper","_Fragment","Stats","max_width","Number","substr","completedPercentage","Math","round","currentWeekTasks","taskDate","getDay","pastDeadlineTasks","Container","role","position","left","right","bottom","zIndex","textAlign","CircularProgress","CircularProgressLabel","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","withLocalStorage","useEffect","jsonString","localStorage","getItem","JSON","parse","setItem","stringify","ChakraProvider","ReactDOM","render","React","ColorModeScript","document","getElementById"],"mappings":"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","file":"static/js/main.d8ad65ac.chunk.js","sourcesContent":["export const VIEWPORT_WIDTH: string = \"600px\";\nexport const INPUT_PLACEHOLDER: string = \"What's up ? ...\";\nexport const TASKS_STORAGE_KEY: string = \"tasksStorage\";\n\nconst categoryIconMap = {\n  personal: \"🏠\",\n  work: \"🏢\",\n  shopping: \"🛍️\",\n  others: \"🌐\",\n};\n\nconst categoryColorMap = {\n  personal: \"blue.100\",\n  work: \"pink.100\",\n  shopping: \"green.100\",\n  others: \"gray.100\",\n};\n\nexport const CATEGORY_ICON_MAP: Record<string, string> = categoryIconMap;\n\nexport const CATEGORY_COLOR_MAP: Record<string, string> = categoryColorMap;\n","import { v4 as uuid_v4 } from \"uuid\";\n\nexport class Task {\n  name: string;\n  isCompleted: boolean = false;\n  id: string;\n  category: string;\n  createdAt: number;\n  dueDate: number;\n\n  constructor(name: string, category: string) {\n    this.name = name;\n    this.id = uuid_v4();\n    this.category = category;\n    this.createdAt = Date.now();\n    // default due date is 7 days from now\n    this.dueDate = this.createdAt + 1000 * 60 * 60 * 24 * 7;\n  }\n}\n","import {\n  Box,\n  BoxProps,\n  Flex,\n  FlexProps,\n  Stat,\n  StatProps,\n} from \"@chakra-ui/react\";\nimport { motion } from \"framer-motion\";\n\nexport const MotionBox = motion<BoxProps>(Box);\nexport const MotionFlex = motion<FlexProps>(Flex);\nexport const MotionStat = motion<StatProps>(Stat);\n","import React from \"react\";\nimport { CATEGORY_ICON_MAP } from \"../constants\";\nimport { Select } from \"@chakra-ui/react\";\n\ninterface CategoryFilterProps {\n  value: string;\n  id?: string;\n  onChange: (value: string) => void;\n}\n\nexport default function CategoryFilter(props: CategoryFilterProps) {\n  const { value, onChange } = props;\n\n  return (\n    <Select\n      variant=\"filled\"\n      maxW=\"80px\"\n      value={value}\n      id={props.id}\n      onChange={(e) => onChange(e.target.value)}\n    >\n      {[\"personal\", \"work\", \"shopping\", \"others\"].map((category: string) => {\n        return (\n          <option key={category} value={category}>\n            {CATEGORY_ICON_MAP[category]}\n          </option>\n        );\n      })}\n    </Select>\n  );\n}\n","import { create } from \"zustand\";\nimport { Task } from \"./types/Task\";\n\n// with undo and redo\nexport interface Store {\n  tasks: Task[];\n  undoStack: Task[][];\n  redoStack: Task[][];\n  filterValues: {\n    category: string[];\n    sortBy: string;\n  };\n\n  setTasks: (tasks: Task[]) => void;\n  addTask: (task: Task) => void;\n  removeTask: (id: string) => void;\n  updateTask: (task: Task) => void;\n  clearTasks: () => void;\n  undo: () => void;\n  redo: () => void;\n  setFilterValues: (\n    filterValues: Partial<{\n      category: string[];\n      sortBy: string;\n    }>\n  ) => void;\n}\n\nconst useStore = create<Store>()((set) => ({\n  tasks: [],\n  undoStack: [],\n  redoStack: [],\n  filterValues: {\n    category: [\"all\"],\n    sortBy: \"createdAt\",\n  },\n\n  setTasks: (tasks) => set({ tasks }),\n  addTask: (task) =>\n    set((state: Store) => {\n      const newTasks = [...state.tasks, task];\n      state.undoStack.push(state.tasks);\n      return { tasks: newTasks };\n    }),\n  removeTask: (id) =>\n    set((state: Store) => {\n      const newTasks = state.tasks.filter((task) => task.id !== id);\n      state.undoStack.push(state.tasks);\n      return { tasks: newTasks };\n    }),\n  updateTask: (task) =>\n    set((state: Store) => {\n      const newTasks = state.tasks.map((t: { id: string }) =>\n        t.id === task.id ? task : t\n      );\n      state.undoStack.push(state.tasks);\n      return { tasks: newTasks };\n    }),\n  clearTasks: () =>\n    set((state: Store) => {\n      state.undoStack.push(state.tasks);\n      return { tasks: [] };\n    }),\n  undo: () =>\n    set((state: Store) => {\n      const lastTasks = state.undoStack.pop();\n      if (lastTasks) {\n        state.redoStack.push(state.tasks);\n        return { tasks: lastTasks };\n      }\n      return { tasks: state.tasks };\n    }),\n  redo: () =>\n    set((state: Store) => {\n      const lastTasks = state.redoStack.pop();\n      if (lastTasks) {\n        state.undoStack.push(state.tasks);\n        return { tasks: lastTasks };\n      }\n      return { tasks: state.tasks };\n    }),\n  setFilterValues: (filterValues) =>\n    set((state: Store) => {\n      return { filterValues: { ...state.filterValues, ...filterValues } };\n    }),\n}));\n\nexport default useStore;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Flex, FormControl, IconButton, Input } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { INPUT_PLACEHOLDER } from \"../constants\";\nimport { Task } from \"../types/Task\";\nimport { MotionBox } from \"./Motions\";\nimport CategoryFilter from \"./CategoryFilter\";\n\nimport useStore, { Store } from \"../store\";\n\nexport const InputTask = () => {\n  const addTask = useStore((state: Store) => state.addTask);\n\n  const [name, setName] = useState<string>(\"\");\n  const [category, setCategory] = useState<string>(\"personal\");\n\n  const taskInputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n  };\n\n  const taskAddHandler = (e: any) => {\n    e.preventDefault();\n    if (!name) return;\n    addTask(new Task(name, category));\n    setName(\"\");\n  };\n\n  return (\n    <MotionBox whileHover={{ scale: 1.05 }}>\n      <form onSubmit={taskAddHandler} autoComplete=\"off\">\n        <FormControl id=\"taskinput\" my={4}>\n          <Flex style={{ gap: \"4px\" }}>\n            <Input\n              onChange={taskInputHandler}\n              mr={2}\n              variant=\"filled\"\n              placeholder={INPUT_PLACEHOLDER}\n              value={name}\n            />\n            <CategoryFilter value={category} onChange={setCategory} />\n            <IconButton\n              aria-label=\"done\"\n              icon={<AddIcon />}\n              size=\"md\"\n              variant=\"solid\"\n              type=\"submit\"\n            />\n          </Flex>\n        </FormControl>\n      </form>\n    </MotionBox>\n  );\n};\n","// edit modal\nimport React, { useState } from \"react\";\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Switch,\n  Button,\n  Flex,\n  Box,\n} from \"@chakra-ui/react\";\n\nimport { Task } from \"../types/Task\";\nimport CategoryFilter from \"./CategoryFilter\";\nimport useStore, { Store } from \"../store\";\n\ninterface TaskEditModalProps {\n  id: string;\n  onClose: () => void;\n}\n\nexport const TaskEditModal: React.FC<TaskEditModalProps> = ({\n  id,\n  onClose,\n}) => {\n  const tasks = useStore((state: Store) => state.tasks) as Task[];\n  const updateTask = useStore((state: Store) => state.updateTask);\n  const currentTask = tasks.find((task) => task.id === id) || ({} as Task);\n  const [task, setTask] = useState<Task>({ ...currentTask });\n\n  const onChange =\n    (key: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (key === \"isCompleted\") {\n        setTask({ ...task, [key]: e.target.checked });\n        return;\n      }\n      if (key === \"dueDate\") {\n        const timestamp = new Date(e.target.value).getTime();\n        return setTask({ ...task, [key]: timestamp });\n      }\n      setTask({ ...task, [key]: e.target.value });\n    };\n\n  const onSave = () => {\n    if (task.name === \"\") return;\n    updateTask(task);\n    onClose();\n  };\n\n  const dueDate = new Date(task.dueDate)\n    .toISOString()\n    .split(\"T\")[0]\n    .split(\"-\")\n    .join(\"-\");\n\n  return (\n    <Modal\n      isOpen={true}\n      onClose={onClose}\n      size={window.innerWidth < 768 ? \"xs\" : \"sm\"}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Edit Task</ModalHeader>\n        <ModalBody>\n          <FormControl>\n            <FormLabel htmlFor=\"name\">Name*</FormLabel>\n            <Input\n              id=\"name\"\n              value={task.name}\n              onChange={onChange(\"name\")}\n              isRequired\n            />\n          </FormControl>\n          <Flex\n            my={4}\n            flexDirection={window.innerWidth < 768 ? \"column\" : \"row\"}\n          >\n            <Box mr={2}>\n              <FormLabel htmlFor=\"dueDate\">Due Date</FormLabel>\n              <Input\n                type=\"date\"\n                id=\"dueDate\"\n                value={dueDate}\n                onChange={onChange(\"dueDate\")}\n              />\n            </Box>\n            <Flex\n              my={window.innerWidth < 768 ? 2 : 0}\n              justifyContent=\"space-between\"\n            >\n              <FormControl mr={2}>\n                <FormLabel htmlFor=\"category\">Category</FormLabel>\n                <CategoryFilter\n                  id=\"category\"\n                  value={task.category}\n                  onChange={(value: string) => {\n                    setTask({ ...task, category: value });\n                  }}\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"isCompleted\" mb=\"0\">\n                  Mark as Complete\n                </FormLabel>\n                <Switch\n                  id=\"isCompleted\"\n                  onChange={onChange(\"isCompleted\")}\n                  isChecked={task.isCompleted}\n                />\n              </FormControl>\n            </Flex>\n          </Flex>\n        </ModalBody>\n        <ModalFooter>\n          <Button colorScheme=\"green\" mr={3} onClick={onSave}>\n            Save\n          </Button>\n          <Button variant=\"ghost\" onClick={onClose}>\n            Close\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { CheckIcon, TimeIcon, DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\nimport { IconButton, Text, Box, Flex } from \"@chakra-ui/react\";\nimport { TargetAndTransition } from \"framer-motion/types/types\";\nimport React, { useState } from \"react\";\nimport { Task } from \"../types/Task\";\nimport { MotionFlex } from \"./Motions\";\n\nimport { CATEGORY_ICON_MAP, CATEGORY_COLOR_MAP } from \"../constants\";\nimport { TaskEditModal } from \"./TaskEditModal\";\nimport useStore, { Store } from \"../store\";\n\ninterface TaskCardProps {\n  id: string;\n}\n\nconst UNSELECTED_OPACITY = 0.8;\n\nconst initialFieldAnimate: TargetAndTransition = {\n  scale: [1, 1.025, 1],\n  opacity: [0, 0.1, 0.2, 0.3, 0.4, UNSELECTED_OPACITY],\n  transition: { duration: 0.2 },\n};\n\nconst deleteFieldAnimate: TargetAndTransition = {\n  scale: [1, 0.95],\n  opacity: [1, UNSELECTED_OPACITY, 0.2, 0.1],\n  transition: { duration: 0.25, ease: \"easeInOut\" },\n};\n\nconst completedProps = {\n  textDecoration: \"line-through\",\n  opacity: 0.5,\n};\n\nexport const TaskCard: React.FC<TaskCardProps> = ({ id }) => {\n  const tasks = useStore((state: Store) => state.tasks) as Task[];\n  const removeTask = useStore((state: Store) => state.removeTask);\n  const updateTask = useStore((state: Store) => state.updateTask);\n\n  const [editing, setEditing] = useState<boolean>(false);\n  const [fieldAnimate, setFieldAnimate] = useState(initialFieldAnimate);\n\n  const currentTask = tasks.find((task) => task.id === id);\n\n  if (!currentTask) return null;\n\n  return (\n    <MotionFlex\n      animate={fieldAnimate}\n      opacity=\"0\"\n      scale=\"1\"\n      onHoverStart={() => {\n        if (fieldAnimate.opacity !== 1)\n          setFieldAnimate({ ...fieldAnimate, opacity: 1, scale: 1.025 });\n      }}\n      onHoverEnd={() => {\n        if (fieldAnimate.opacity !== UNSELECTED_OPACITY)\n          setFieldAnimate({\n            ...fieldAnimate,\n            opacity: UNSELECTED_OPACITY,\n            scale: 1,\n          });\n      }}\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      borderRadius=\"md\"\n      boxShadow=\"md\"\n      p={2}\n      my={2}\n      w=\"100%\"\n      initial=\"rest\"\n      bg={CATEGORY_COLOR_MAP[currentTask.category]}\n    >\n      <Flex alignItems=\"center\" style={{ gap: \"4px\" }}>\n        <Text fontSize=\"2xl\" width=\"28px\" pr={1}>\n          {CATEGORY_ICON_MAP[currentTask.category]}\n        </Text>\n        <Box>\n          <Text\n            fontSize=\"2xl\"\n            fontWeight=\"semibold\"\n            style={currentTask.isCompleted ? completedProps : {}}\n            wordBreak=\"break-word\"\n          >\n            {currentTask.name}\n          </Text>\n\n          <Flex alignItems=\"center\">\n            <TimeIcon pr={1} />\n            <Text\n              fontSize=\"xs\"\n              style={currentTask.isCompleted ? completedProps : {}}\n            >\n              {new Date(currentTask.dueDate).toLocaleDateString()}\n            </Text>\n          </Flex>\n        </Box>\n      </Flex>\n      <Box>\n        {!currentTask.isCompleted ? (\n          <IconButton\n            aria-label=\"done\"\n            icon={<CheckIcon />}\n            size=\"md\"\n            variant=\"ghost\"\n            onClick={() => {\n              updateTask({ ...currentTask, isCompleted: true });\n            }}\n          />\n        ) : null}\n        <IconButton\n          aria-label=\"edit\"\n          icon={<EditIcon />}\n          size=\"md\"\n          variant=\"ghost\"\n          onClick={() => {\n            setEditing(true);\n          }}\n        />\n        <IconButton\n          aria-label=\"close\"\n          icon={<DeleteIcon />}\n          colorScheme=\"red\"\n          size=\"md\"\n          variant=\"ghost\"\n          onClick={() => {\n            setFieldAnimate(deleteFieldAnimate);\n            setTimeout(() => {\n              removeTask(currentTask.id);\n            }, 250);\n          }}\n        />\n      </Box>\n      {editing && (\n        <TaskEditModal\n          id={id}\n          onClose={() => {\n            setEditing(false);\n          }}\n        />\n      )}\n    </MotionFlex>\n  );\n};\n","import React from \"react\";\n\nimport {\n  Flex,\n  Menu,\n  MenuButton,\n  MenuList,\n  Button,\n  IconButton,\n  MenuOptionGroup,\n  MenuItemOption,\n  MenuDivider,\n} from \"@chakra-ui/react\";\n\nimport { CATEGORY_ICON_MAP } from \"../constants\";\nimport useStore, { Store } from \"../store\";\n\nimport { FaFilter, FaUndo, FaRedo } from \"react-icons/fa\";\n\nconst SORT_BY_MAP: Record<string, string> = {\n  createdAt: \"Created\",\n  dueDate: \"Due Date\",\n  name: \"Name\",\n};\n\nexport default function FilterBar() {\n  const undoStack = useStore((state: Store) => state.undoStack);\n  const redoStack = useStore((state: Store) => state.redoStack);\n  const undo = useStore((state: Store) => state.undo);\n  const redo = useStore((state: Store) => state.redo);\n  const filterValues = useStore((state: Store) => state.filterValues) as {\n    category: string[];\n    sortBy: string;\n  };\n  const setFilterValues = useStore((state: Store) => state.setFilterValues);\n\n  console.log(filterValues, \"filterValues\");\n\n  const onChange = (type: \"sort\" | \"category\") => (value: string) => {\n    if (type === \"category\") {\n      if (value === \"all\") {\n        setFilterValues({ category: [\"all\"] });\n        return;\n      }\n      if (filterValues.category.includes(value)) {\n        setFilterValues({\n          category: filterValues.category.filter((c) => c !== value),\n        });\n      } else {\n        setFilterValues({\n          category: [\n            ...filterValues.category.filter((c) => c !== \"all\"),\n            value,\n          ],\n        });\n      }\n      return;\n    }\n    if (type === \"sort\") {\n      setFilterValues({\n        sortBy: value,\n      });\n      return;\n    }\n  };\n\n  const activeFilterState =\n    !filterValues.category.includes(\"all\") ||\n    filterValues.sortBy !== \"createdAt\";\n\n  return (\n    <Flex style={{ gap: \"8px\" }}>\n      <IconButton\n        aria-label=\"undo\"\n        icon={<FaUndo />}\n        variant=\"ghost\"\n        colorScheme={undoStack.length > 0 ? \"green\" : \"gray\"}\n        onClick={() => undo()}\n      />\n      <IconButton\n        aria-label=\"redo\"\n        icon={<FaRedo />}\n        variant=\"ghost\"\n        colorScheme={redoStack.length > 0 ? \"green\" : \"gray\"}\n        onClick={() => redo()}\n      />\n      <Menu closeOnSelect={false} placement=\"bottom-end\">\n        <MenuButton\n          as={Button}\n          px={3}\n          py={1}\n          size={32}\n          colorScheme={activeFilterState ? \"green\" : \"gray\"}\n        >\n          <FaFilter />\n        </MenuButton>\n        <MenuList minWidth=\"200px\">\n          <MenuOptionGroup\n            title=\"Sort By\"\n            type=\"radio\"\n            value={filterValues.sortBy}\n          >\n            {[\"createdAt\", \"dueDate\", \"name\"].map((sort) => (\n              <MenuItemOption\n                key={sort}\n                value={sort}\n                onClick={() => onChange(\"sort\")(sort)}\n              >\n                {SORT_BY_MAP[sort]}\n              </MenuItemOption>\n            ))}\n          </MenuOptionGroup>\n          <MenuDivider />\n          <MenuOptionGroup\n            title=\"Filter By Category\"\n            type=\"checkbox\"\n            value={filterValues.category}\n          >\n            {[\"All\", \"Work\", \"Personal\", \"Shopping\", \"Others\"].map(\n              (category) => (\n                <MenuItemOption\n                  key={category}\n                  onClick={() =>\n                    onChange(\"category\")(category.toLocaleLowerCase())\n                  }\n                  value={category.toLocaleLowerCase()}\n                >\n                  {`${\n                    CATEGORY_ICON_MAP[category.toLocaleLowerCase()] || \"   \"\n                  } ${category}`}\n                </MenuItemOption>\n              )\n            )}\n          </MenuOptionGroup>\n        </MenuList>\n      </Menu>\n    </Flex>\n  );\n}\n","import { Box, Text, Divider, Flex } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { Task } from \"../types/Task\";\nimport { TaskCard } from \"./Task\";\n\nimport FilterBar from \"./FilterBar\";\n\nimport useStore, { Store } from \"../store\";\n\nexport const TaskList = () => {\n  const tasks = useStore((state: Store) => state.tasks);\n  const filterValues = useStore((state: Store) => state.filterValues);\n\n  // filter tasks based on filterValues.category and filterValues.sortBy\n  const filteredTasks = tasks\n    .filter((task: Task) => {\n      if (filterValues.category.includes(\"all\")) return true;\n      return filterValues.category.includes(task.category);\n    })\n    .sort((a: Task, b: Task) => {\n      if (filterValues.sortBy === \"createdAt\") {\n        return a.createdAt - b.createdAt;\n      }\n      if (filterValues.sortBy === \"dueDate\") {\n        return a.dueDate - b.dueDate;\n      }\n      if (filterValues.sortBy === \"name\") {\n        return a.name.localeCompare(b.name);\n      }\n      return 0;\n    });\n  console.log(filteredTasks, \"filteredTasks\");\n\n  return (\n    <Box my={4}>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Text fontSize=\"xl\" fontWeight=\"bold\">\n          Tasks\n        </Text>\n        <FilterBar />\n      </Flex>\n      <Divider my={2} />\n      <Box overflowY=\"auto\" h=\"65vh\" px={2} pb={10}>\n        {filteredTasks.map((task: Task) => {\n          return <TaskCard id={task.id} key={task.id} />;\n        })}\n      </Box>\n    </Box>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.6e6b651f.png\";","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import React from \"react\";\n\nimport {\n  Heading,\n  Image,\n  HStack,\n  Grid,\n  GridItem,\n  Menu,\n  MenuItem,\n  MenuButton,\n  MenuList,\n  Button,\n} from \"@chakra-ui/react\";\nimport { ChevronDownIcon, SettingsIcon } from \"@chakra-ui/icons\";\n\nimport LogoImg from \"../assets/logo.png\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\n\nexport default function TopBar() {\n  return (\n    <HStack boxShadow=\"md\">\n      <Grid templateRows=\"1fr\" templateColumns=\"1fr 1fr\" m={2} w=\"100%\">\n        <GridItem>\n          <HStack>\n            <Image\n              src={LogoImg}\n              alt=\"Todo App Logo\"\n              borderRadius={\"xl\"}\n              boxSize={\"40px\"}\n            />\n            <Heading cursor=\"\" as=\"h1\" size=\"l\">\n              Todo App\n            </Heading>\n          </HStack>\n        </GridItem>\n        <GridItem justifySelf=\"end\" justifyContent=\"space-around\">\n          <Grid templateRows=\"1fr\" templateColumns=\"1fr 1fr\">\n            <GridItem>\n              <ColorModeSwitcher />\n            </GridItem>\n            <GridItem>\n              <Menu placement=\"bottom-end\" size=\"sm\">\n                <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n                  <SettingsIcon />\n                </MenuButton>\n                <MenuList minW={120}>\n                  <MenuItem>Profile</MenuItem>\n                  <MenuItem>Logout </MenuItem>\n                </MenuList>\n              </Menu>\n            </GridItem>\n          </Grid>\n        </GridItem>\n      </Grid>\n    </HStack>\n  );\n}\n","import React from \"react\";\n\nimport { Box } from \"@chakra-ui/react\";\n\nimport TopBar from \"./TopBar\";\n\ninterface WrapperProps {}\n\nexport const Wrapper: React.FC<WrapperProps> = ({ children }) => {\n  return (\n    <>\n      <TopBar />\n      <Box px={4}>{children}</Box>\n    </>\n  );\n};\n","import {\n  Container,\n  CircularProgress,\n  CircularProgressLabel,\n  Text,\n  Flex,\n  Box,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { VIEWPORT_WIDTH } from \"../constants\";\nimport { Task } from \"../types/Task\";\nimport useStore, { Store } from \"../store\";\n\nexport const Stats = () => {\n  const tasks = useStore((state: Store) => state.tasks) as Task[];\n\n  if (tasks.length === 0) return null;\n  const max_width = `${\n    (140 / 100) * Number(VIEWPORT_WIDTH.substr(0, VIEWPORT_WIDTH.length - 2))\n  }px`;\n\n  const completedPercentage = Math.round(\n    (tasks.filter((task) => task.isCompleted).length / tasks.length) * 100\n  );\n\n  // this week deadline\n  const currentWeekTasks = tasks.filter((task) => {\n    const taskDate = new Date(task.dueDate);\n    const today = new Date();\n    const todayWeek = today.getDay();\n    const taskWeek = taskDate.getDay();\n    return todayWeek === taskWeek;\n  });\n\n  // deadline past\n  const pastDeadlineTasks = tasks.filter((task) => {\n    const taskDate = new Date(task.dueDate);\n    const today = new Date();\n    return today.getTime() > taskDate.getTime();\n  });\n\n  return (\n    <Container\n      maxW={max_width}\n      as=\"footer\"\n      role=\"contentinfo\"\n      position=\"fixed\"\n      left=\"0\"\n      right=\"0\"\n      bottom=\"0\"\n      zIndex={1}\n      textAlign=\"center\"\n      p={2}\n    >\n      <Flex justifyContent=\"space-evenly\">\n        <Box>\n          <Text fontSize=\"xs\">Completed</Text>\n          <CircularProgress value={completedPercentage} color=\"green.500\">\n            <CircularProgressLabel>{`${completedPercentage}%`}</CircularProgressLabel>\n          </CircularProgress>\n        </Box>\n        <Box>\n          <Text fontSize=\"xs\">Current week tasks</Text>\n          <CircularProgress\n            value={(currentWeekTasks.length / tasks.length) * 100}\n            color=\"blue.500\"\n          >\n            <CircularProgressLabel>\n              {currentWeekTasks.length}\n            </CircularProgressLabel>\n          </CircularProgress>\n        </Box>\n        <Box>\n          <Text fontSize=\"xs\">Past deadline tasks</Text>\n          <CircularProgress\n            value={(pastDeadlineTasks.length / tasks.length) * 100}\n            color=\"red.500\"\n          >\n            <CircularProgressLabel>\n              {pastDeadlineTasks.length}\n            </CircularProgressLabel>\n          </CircularProgress>\n        </Box>\n      </Flex>\n    </Container>\n  );\n};\n","// theme.ts\n// 1. import `extendTheme` function\nimport { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","import * as React from \"react\";\nimport { ChakraProvider, Container } from \"@chakra-ui/react\";\nimport { InputTask } from \"./components/InputTask\";\nimport { TaskList } from \"./components/TaskList\";\nimport { Wrapper } from \"./components/Wrapper\";\nimport { Stats } from \"./components/Stats\";\nimport theme from \"./theme\";\nimport { useEffect } from \"react\";\nimport { TASKS_STORAGE_KEY } from \"./constants\";\nimport useStore, { Store } from \"./store\";\n\ninterface AppProps {\n  withLocalStorage?: \"true\" | \"false\";\n}\n\nexport const App: React.FC<AppProps> = ({ withLocalStorage = \"true\" }) => {\n  const [tasks, setTasks] = useStore((state: Store) => [\n    state.tasks,\n    state.setTasks,\n  ]);\n\n  useEffect(() => {\n    if (withLocalStorage !== \"true\") return;\n    console.log(withLocalStorage);\n    const jsonString = localStorage.getItem(TASKS_STORAGE_KEY) || \"\";\n    if (jsonString === \"\") return;\n    setTasks(JSON.parse(jsonString));\n  }, [withLocalStorage, setTasks]);\n\n  useEffect(() => {\n    if (withLocalStorage !== \"true\") return;\n    localStorage.setItem(TASKS_STORAGE_KEY, JSON.stringify(tasks));\n  }, [tasks, withLocalStorage]);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Container px={0}>\n        <Wrapper>\n          <InputTask />\n          <TaskList />\n        </Wrapper>\n      </Container>\n\n      <Stats />\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App withLocalStorage=\"true\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}